package com.foxminded.Integerdivision;

public class Division {

    private char[] devidend;
    int devider = 0;
    int result = 0;
    int IndexOfDevidend = 0;
    String subtrahendPartOfDevidend;
    int minuend;
    int residual;

    public void divide(String devidend, String devider) {

        char[] devidentChar = devidend.toCharArray();

        subtrahendPartOfDevidend = String.valueOf(devidentChar[IndexOfDevidend]);
        while (Integer.parseInt(subtrahendPartOfDevidend) / Integer.parseInt(devider) == 0) {
            IndexOfDevidend++;
            subtrahendPartOfDevidend = subtrahendPartOfDevidend + String.valueOf(devidentChar[IndexOfDevidend]);
        }
        int numberForResult = Integer.parseInt(subtrahendPartOfDevidend) / Integer.parseInt(devider);
        //result= result+numberForResult;
        minuend = numberForResult * Integer.parseInt(devider);
        residual = Integer.parseInt(subtrahendPartOfDevidend) - minuend;

        StringBuffer lineForPrint = new StringBuffer("_" + devidend + "|" + devider);
        System.out.println(lineForPrint);

        int lengthPrintLine = lineForPrint.length();
        lineForPrint.replace(0, lengthPrintLine, fill(lengthPrintLine, " ")).append("a");

        int minuendPosition = IndexOfDevidend + 2 - String.valueOf(minuend).length();
        int minuendLength = String.valueOf(minuend).length();
        lineForPrint.replace(minuendPosition, minuendPosition + minuendLength, Integer.toString(minuend) );
        int verticalBarPosition = String.valueOf(devidend).length() + 1;
        result = Integer.parseInt(devidend) / Integer.parseInt(devider);
        lineForPrint.replace(verticalBarPosition,verticalBarPosition + 2,"|" +  fill(Integer.toString(result).length(), "-"));
        System.out.println(lineForPrint);

        lengthPrintLine = lineForPrint.length();
        lineForPrint.replace(0, lengthPrintLine, fill(lengthPrintLine, " ")).append("a");

        lineForPrint.replace(minuendPosition , minuendPosition + minuendLength, fill(minuendLength, "-"));
        lineForPrint.replace(verticalBarPosition,verticalBarPosition + 2,"|" +  result);
        System.out.println(lineForPrint);


        int qq = String.valueOf(minuend).length() + 2;
        lineForPrint.insert(IndexOfDevidend + 2 - String.valueOf(minuend).length(), minuend);
        lineForPrint.insert(devidend.length() + 1, "|");

        nextStepToDivide(devidentChar, devider);
    }

    private void nextStepToDivide(char[] devidentChar, String devider ){
        subtrahendPartOfDevidend = Integer.toString(residual);
        int IndexOfDevidendStart = IndexOfDevidend;
        while (Integer.parseInt(subtrahendPartOfDevidend) / Integer.parseInt(devider) == 0) {
            IndexOfDevidend++;
            subtrahendPartOfDevidend = subtrahendPartOfDevidend + String.valueOf(devidentChar[IndexOfDevidend]);
        }
        int numberForResult = Integer.parseInt(subtrahendPartOfDevidend) / Integer.parseInt(devider);
        //result= result+numberForResult;
        minuend = numberForResult * Integer.parseInt(devider);
        residual = Integer.parseInt(subtrahendPartOfDevidend) - minuend;

    }

    private String fill(int length, String with) {
        StringBuffer sb = new StringBuffer(length);
        while (sb.length() < length) {
            sb.append(with);
        }
        return sb.toString();
    }


}
